Игра-змейка с возможностью игры до 4-х человек одновременно.Каждый из игроков управляет,как и в обычной игре, змейкой.При столкновении с чем-либо, кроме, еды, змейка выбывает из игры. В конце выводится цвет победителя.

У нас есть один игровой класс SnakePart, который определяет змею,он содержит указатель на следующую часть тела,а так же состояние, которое говорит голова ли это.

Каждый игрок хранит указатель на голову.Его управление заключается в задании направления головы.

Сервер случайно создает яблоко, которое является общим для всех.При столкновении - тот компьютер, который столкнулся с ним отправляет запрос на его удаление всем остальным.

Существует специальная функция репликации всей змейки (веротяно лучше выделить в класс), которая начиная с головы реплицирует каждую часть тела.

Сам класс репликации хранит позицию,цвет и тип тела (голова,туловище).

class Snake {
public:
	Snake(position,TeamColor color);
	addPart();
	void update(float delta);
	setDirection(Direction dir);
private:
	void moveSnake(float delta);
	Direction direction;
	TeamColor color;
	SnakePart* head;

};

Закончил на получении цвета.Теперь сервер раздал каждом подключенному игроку цвет его комманды,а так же получил их имена.

Далее необходимо дождаться либо заполнения комнаты, что так же должно отображаться.Либо команды сервера о начале игры.

Более того, при подключении и определении цвета, необходимо на стороне клиента уже создавать репликационный объект и связывать его с сервером.Хоть и игра ещё не разрешена, но сервер уже должен расставить все на данный момент существующие объекты по своим местам.

По получении команды о начале, игрокам открывается возможность управлять своим созданны объектом. При этом, класс Snake занимается репликацией всей змеи, самостоятельно вызывая необходимые методы(что-то типа moveHead == move All snake == call replicaSetPosition).

При столкновении с яблоком, игрок вызывает специальный метод addPart, который добавляет в список новую часть тела,а так же передает его в репликационный менеджер.

Закончил на событии начала игры.Нужно реализовать ReplicaManager и Connection_RM3. При начале игры. Сервер устанавливает позиции всем игрокам.

///////////////////////////////////////////////////////////////////////////////

Всё яснее становится , что нужно поверх cocos2d создавать ещё один слой классов, таких как ReplicaSprite или ReplicaScene, которые должны определять специальные виртуальные методы, наподобии replicaFactory.
